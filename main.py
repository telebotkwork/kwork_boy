import asyncio
import logging
import time

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, StaleElementReferenceException, NoSuchElementException

from webdriver_manager.chrome import ChromeDriverManager

# üîπ –¢–≤–æ–π Telegram —Ç–æ–∫–µ–Ω
TOKEN = "8047733951:AAG4Tyb6TFm65niNsJ2QlAUMHU4IOt4taKc"

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ IT - –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
CATEGORY = "41"  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞" –∏ "–ò–¢"
BASE_URL = "https://kwork.ru/projects?c="
MIN_PRICE = 1000
MAX_PRICE = 70000

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium
options = Options()
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')


# üîπ –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–æ–≤
def get_orders():
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    orders = []

    try:
        url = BASE_URL + CATEGORY
        driver.get(url)

        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div.want-card.want-card--list"))
        )

        elements = driver.find_elements(By.CSS_SELECTOR, "div.want-card.want-card--list")

        for element in elements:
            try:
                title_element = element.find_element(By.CSS_SELECTOR, ".wants-card__header-title")
                price_element = element.find_element(By.CSS_SELECTOR, ".wants-card__price")

                title = title_element.text.strip()
                price_text = price_element.text.strip()
                price = int("".join(filter(str.isdigit, price_text))) if price_text else 0

                # üîπ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                try:
                    desc_element = element.find_element(By.CSS_SELECTOR, "div.want-card__description")
                    description = desc_element.text.strip()
                except NoSuchElementException:
                    description = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

                # üîπ –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑
                try:
                    link = title_element.find_element(By.XPATH, "..").get_attribute("href")
                    if not link:
                        link = element.find_element(By.CSS_SELECTOR, "a").get_attribute("href")
                except NoSuchElementException:
                    link = "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

                if MIN_PRICE <= price <= MAX_PRICE:
                    orders.append(f"üìå *{title}*\nüí∞ {price} —Ä—É–±.\nüìÑ {description}\nüîó [–°—Å—ã–ª–∫–∞]({link})\n\n")

            except StaleElementReferenceException:
                continue
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")

    except TimeoutException:
        print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {CATEGORY}")

    driver.quit()
    return orders


# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã —Å Kwork –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞.\n\n"
                         "–¢—ã –º–æ–∂–µ—à—å –≤—Ä—É—á–Ω—É—é –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–∫–∞–∑—ã –∫–æ–º–∞–Ω–¥–æ–π /parse.")

    global chat_id
    chat_id = 7084242333  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —á–∞—Ç–∞
    print(f"–ü–æ–ª—É—á–µ–Ω chat_id: {chat_id}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏


# üîπ –ö–æ–º–∞–Ω–¥–∞ /parse (—Ä—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥)
@dp.message(Command("parse"))
async def parse_kwork(message: Message):
    await message.answer("üîç –ò—â—É –∑–∞–∫–∞–∑—ã, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    orders = get_orders()

    if orders:
        for order in orders[:50]:  # üîπ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 50 –∑–∞–∫–∞–∑–∞–º–∏
            await message.answer(order, parse_mode="Markdown", disable_web_page_preview=True)
        await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤.")
    else:
        await message.answer("‚ö† –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


# üîπ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
async def send_orders_every_4h():
    await asyncio.sleep(5)  # –ü–æ–¥–æ–∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    while True:
        print("‚è≥ –ü–∞—Ä—Å–∏–º –∑–∞–∫–∞–∑—ã...")
        orders = get_orders()

        if orders:
            for order in orders[:50]:  # üîπ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 50 –∑–∞–∫–∞–∑–∞–º–∏
                await bot.send_message(chat_id, order, parse_mode="Markdown", disable_web_page_preview=True)
            await bot.send_message(chat_id, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤.")
        else:
            await bot.send_message(chat_id, "‚ö† –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        print("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∂–¥—É 4 —á–∞—Å–∞...")
        await asyncio.sleep(14400)  # –ñ–¥—ë–º 4 —á–∞—Å–∞ (14400 —Å–µ–∫—É–Ω–¥)


# üîπ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    asyncio.create_task(send_orders_every_4h())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
